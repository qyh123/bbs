/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.itstar.manage.control.action;

import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.itstar.dao.SectionDao;
import com.itstar.dao.UserDao;
import com.itstar.manage.dbconnection.DatabaseConnection;
import com.itstar.model.BBSSection;
import com.itstar.model.BBSUser;

public class DisplaySectionAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

		/**
		 * Method execute
		 * 查看版块信息
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return ActionForward
		 * @throws Exception
		 */
		public ActionForward show(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			
			request.setCharacterEncoding("GBK");
			response.setCharacterEncoding("GBK");	
			// 定义如下分页变量
			// 1、定义没页要显示的记录数
			int lineSize = 10;
			// 2、定义一个当前是第几页
			int currentPage = 1;
			// 计算出总页数
			int pageSize = 0;
			// 总记录数 / 每页显示的记录数
			int allRecorders = 30;
			// 接收传过来的当前页
			try {
				currentPage = Integer.parseInt(request.getParameter("cp"));
			} catch (Exception e) {
			}
			// 获取总记录数
			SectionDao dao = new SectionDao();
			allRecorders = dao.getAllRecorders(request);
			// 计算总页数
			pageSize = (allRecorders + lineSize - 1) / lineSize;
			// 获取信息列表
			
			List<BBSSection> array = dao.getArray(request, currentPage,lineSize);
			request.setAttribute("array", array);
			request.setAttribute("currentPage", currentPage);
			request.setAttribute("pageSize", pageSize);
			request.setAttribute("allRecorders", allRecorders);
			return mapping.findForward("showSection");
		}
		/**
		 * 删除版块
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 * @throws Exception
		 */
		public ActionForward delete(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			
			String id = request.getParameter("id");//取得版块号
			SectionDao dao = new SectionDao();
			dao.deleteSection(id);
			
			return mapping.findForward("delete");
		}
		/**
		 * 置顶版块
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 * @throws Exception
		 */
		public ActionForward top(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			
			String id = request.getParameter("id");//取得版块号
			SectionDao dao = new SectionDao();
			dao.topsection(id);
			
			return mapping.findForward("delete");
		}
		/**
		 * 隐藏版块
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 * @throws Exception
		 */
		public ActionForward state(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			String id = request.getParameter("id");//取得版块号
			SectionDao dao = new SectionDao();
			dao.statesection(id);
			
			return mapping.findForward("delete");
		}
		/**
		 * 修改版块
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 * @throws Exception
		 */
		public ActionForward edit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			
			//获取版块id
			int sid=Integer.parseInt(request.getParameter("sid"));
			
			//获取版块名称
			String sname=request.getParameter("sname");
			
			//获取版主的id值
			String sectionMasterID=request.getParameter("mid");
			
			//获取版块简介
			String profile = request.getParameter("profile");
			
			//修改版块信息
			SectionDao dao = new SectionDao();
			dao.editSection(sid, sname, sectionMasterID, profile);
		
			return mapping.findForward("delete");
			
		}
		/**
		 * 查看名称
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 * @throws Exception
		 */
		public ActionForward viewName(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			request.setCharacterEncoding("GBK");
			request.setCharacterEncoding("GBK");
			int sid = Integer.parseInt(request.getParameter("id"));
 			UserDao udao1 = new UserDao();
			List<BBSUser> sectionMasterList = udao1.getUserList();
			SectionDao dao = new SectionDao();
			BBSSection section = dao.getSection(sid);
 			try {
				UserDao udao2 = new UserDao();
				BBSUser sectionMaster = udao2.getUserInfo(Integer.parseInt(section.getSectionMasterID()));
				request.setAttribute("masterList", sectionMasterList);
				request.setAttribute("sectionMaster", sectionMaster);
				request.setAttribute("section", section);
			} catch (RuntimeException e) {
				e.printStackTrace();
			}
			return mapping.findForward("view");
		}
}